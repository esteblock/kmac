# KMAC wiki
This is a dynamic set of notes for the KMAC project.
## What is KMAC?
KMAC is the project for building a contract, with the SOROBAN-SDK tools.
## For what?
KMAC implements a Finite State Machine template with the purpose of simplifying new developments using this pattern.
## How do we build KMAC?
KMAC  use well-known design patterns to practice these features and provide with that, easily understandable and reusable components.
## About the architecture?
KMAC providing extensible functions capabilities. 

See the next image "KMAC architecture diagram"

![kmac Architecture Diagram](https://github.com/huitemagico/kmac/blob/main/pictures/kmacarch023.png)

You can find further explanations in the following document:
[kmac Architecture Document](https://github.com/huitemagico/kmac/blob/main/kmac_techArchDoc.pdf)

## For installing the environment "from Zero" 
I have a document related to the 'father' project 'echo2'.
Please refer to this document to find instructions on how to set up the environment for running KMAC.
[echo2 tutorial Document](https://github.com/huitemagico/echo2/blob/rama1/echo2tutorial.pdf)
 


#  Purpose of this WIKI: 
The purpose is to maintain easily updatable documentation that explain features, challenges, and issues for each version of KMAC.

##  Target Audience
 a. The KMAC development team
 b. Individuals interested in knowing some technical aspect of the development process
 c. Individuals interested in understanding the process of updating deliverables.

## Content:
   List of KMAC versions with their respective characteristics
   Deriverables documentation
   Index of images
   News log

# Deliverables
 This wiki provide details of how KMAC acomplish the requirement deliverables list.
 Please see the requirement at the following link:
[Deliverables](https://github.com/huitemagico/kmac/blob/main/README.md#deliverables)

# Deliverable 1: Proof of Concept (POC) for Design Pattern Implementation

Brief Description: Design, coding, and documentation of functional code components using soroban-sdk.
This includes the following features:

## Security Role-Based Access Control
###  'Allow List' Implementation
The kmac1 version implements basic role management as POC of Security and Allow list. 
There are two types of users: (1) the 'kreator,' who is the contract administrator, and (2) the 'user,'
 who sends FSM (Finite State Machine) flow transactions. 
###kreator
(a) Init the contract. Initially, the 'kreator' sends their own address to the contract using the 'storagekreatoraddress' administration transaction. 
Subsequently, all calls made by the 'kreator' to the contract must use this address. 
Please see details at "details of the script" and "diagram of the kreator and user actions".

(b) The 'kreator' also sends the address of a common user for setting this address in the contract. 
###user
The user role send "common user" transactions, referred to as 'user FSM flow transactions'."

### Design and coding
The kmac1 version has a single entry point, and transactions are validated based on whether they are administrative transactions that must be sent by the 'kreator' or user transactions.
More details at the script snippet.


## Modularity 
The kmac1 version has the "Implementation of an basic structure for internal and external functions".
The "core" (in kmac1) has internal functions (for testing).
The main external function is "coordinates", that implement the extensibilty feature. This way, the programmer who makes 
the setting for an specific FSM (*) fill the matrix signaling with this where there is not a flow (picture).

Deliverable requirement: "Incorporating parametric components with declarative functionality to enable the use of extensible functions with component reuse."
The filling of the matrix is an instance of "declarative programming". This is because there is no "logic" coded. The logic is in the "core".

## Testing of the KMAC version with above explained modules
## How to measure completion of Deliverable 1:
Code and tests available in https://github.com/huitemagico/kmac
Announcement in Stellar Development Discord
Documentation published in dev.to and on KMAC github repository
Estimated date of completion: November 10 2023 (2 weeks from october 27, 2023)

# KMAC version list
## kmac alfa 1.0 november 02, 2023.

-contains a first coding for auth function
-accept 2 first parameters auth style

![kmac address diagram](https://github.com/huitemagico/kmac/blob/main/pictures/kmacaddress03a.png)
Fig. kmac address diagram

# Index of images

# News log
###  10/01/2023 
important change in the structure : new folder contracts 
New file contracts/READ.ME , only purpose of explain components.
Not very defined goal.

###  11/02/2023 
Beginning with wiki :)


